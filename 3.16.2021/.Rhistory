ggplot(df, aes_string(xvar, yvar)) + geom_point() + geom_smooth(method = 'lm') + ggtitle(paste0('Pval = ', formatpval(pval)))
}
plot_lm_cor = function(df, xvar, yvar){
cor = cor(xvar, yvar, method = 'spearman', use = 'complete.obs')
ggplot(df, aes_string(xvar, yvar)) + geom_point() + geom_smooth(method = 'lm') + ggtitle(paste0('Spearman correlation = ', formatbeta(cor)))
}
plot_lm_cor(angiotensin, AT4Nmilipor, qAT4)
plot_lm_cor = function(df, xvar, yvar){
cor = cor(xvar, yvar, method = 'spearman', use = 'complete.obs')
ggplot(df, aes(xvar, yvar)) + geom_point() + geom_smooth(method = 'lm') + ggtitle(paste0('Spearman correlation = ', formatbeta(cor)))
}
plot_lm_cor = function(df, xvar, yvar){
cor = cor(df[,xvar], df[,yvar], method = 'spearman', use = 'complete.obs')
ggplot(df, aes_string(xvar, yvar)) + geom_point() + geom_smooth(method = 'lm') + ggtitle(paste0('Spearman correlation = ', formatbeta(cor)))
}
plot_lm_cor(angiotensin, 'AT4Nmilipor', 'qAT4')
saveRDS(all_pheno, file = '/Volumes/JHPCE/dcs01/active/projects/RUSH/R_objects/all_pheno.rds')
grep('PGC', colnames(all_pheno))
all_pheno[grep('PGC', colnames(all_pheno))]
all_pheno[grep('PGC', colnames(all_pheno)),]
all_pheno[,grep('PGC', colnames(all_pheno))]
library(yangR)
library(readxl)
library(dplyr)
library(ggplot2)
library(knitr)
wd <- '/Volumes/JHPCE/dcs01/active/projects/RUSH/'
setwd(wd)
opts_knit$set(root.dir = wd)
plot_lm_cor = function(df, xvar, yvar){
cor = cor(df[,xvar], df[,yvar], method = 'spearman', use = 'complete.obs')
ggplot(df, aes_string(xvar, yvar)) + geom_point() + geom_smooth(method = 'lm') + ggtitle(paste0('Spearman correlation = ', formatbeta(cor)))
}
pgc = all_pheno[,grep('PGC', colnames(all_pheno))]
pgc
plot_lm_cor(angiotensin, 'PGC1aN', 'qPGC1a')
pgc = all_pheno[,grep('PGC', colnames(all_pheno))]
plot_lm_cor(pgc, 'PGC1aN', 'qPGC1a')
plot_lm_cor(pgc, 'PGC1aN', 'dCTPGC1a')
plot_lm = function(df, xvar, yvar){
formula = as.formula(paste0(yvar, '~', xvar))
pval = coef(summary(lm(formula, data = df)))[2,4]
ggplot(df, aes_string(xvar, yvar)) + geom_point() + geom_smooth(method = 'lm') + ggtitle(paste0('Pval = ', formatpval(pval)))
}
plot_lm(all_pheno, 'mtDNA_CN', 'AT1norm')
plot_lm(all_pheno, 'mtDNA', 'AT1norm')
all_pheno$mtDNA_CN = all_pheno$deltaCT
plot_lm(all_pheno, 'mtDNA_CN', 'AT1norm')
no.out = subset(all_pheno, mtDNA_CN > 10)
plot_lm(no.out, 'mtDNA_CN', 'AT1norm')
plot_lm(no.out, 'mtDNA_CN', 'AT2norm')
plot_lm_cor(angiotensin, 'AT2norm', 'dCTAT2')
plot_lm_cor(angiotensin, 'AT1norm', 'dCTAT1')
plot_lm_cor(angiotensin, 'AT4Nmilipor', 'dCTAT4')
plot_lm(no.out, 'mtDNA_CN', 'AT4Nmilipor')
plot_lm(no.out, 'mtDNA_CN', 'AT4norm')
plot_lm(no.out, 'mtDNA_CN', 'AT4N')
plot_lm(no.out, 'mtDNA_CN', 'dCTAT1')
plot_lm(no.out, 'mtDNA_CN', 'dCTAT2')
plot_lm(no.out, 'mtDNA_CN', 'dCTAT4')
#### Check AT gene expression and protein levels with mtDNA-CN
###### Protein levels
```{r}
no.out = subset(all_pheno, mtDNA_CN > 10)
plot_lm(no.out, 'mtDNA_CN', 'dCTAT1')
plot_lm(no.out, 'mtDNA_CN', 'dCTAT2')
plot_lm(no.out, 'mtDNA_CN', 'dCTAT4')
```
Significant associations between angiotensin II type 1 and 2 receptors, but not type 4.
library(ggplot2)
library(magrittr)
library(data.table)
library(yangR)
library(readxl)
library(analyzeR)
library(tidyverse)
# EA = readRDS('/dcs01/arking/arkinglab/active/projects/aric/metabolomics/vthuyduo/ecg.assoc/2_analyses/EA/kNN.Cor/analysis/EA_Imputed_Results.rds')
load('/Volumes/JHPCE/dcs01/active/projects/aric/metabolomics/vthuyduo/ecg.assoc/2_analyses/EA/kNN.Cor/analysis/EA_Imputed_Results.rds')
imputation_results1 = imputation_results
pheno_only1 = pheno_only
load('/Volumes/JHPCE/dcs01/active/projects/aric/metabolomics/vthuyduo/ecg.assoc/2_analyses/AA/kNN.Cor/analysis/AA_Imputation_Results.rds')
imputation_results = rbind(imputation_results1, imputation_results)
pheno_only = rbind(pheno_only1, pheno_only)
ggplot(imputation_results, aes(metab_hypoxanthine)) + geom_rug() + geom_density() + ggtitle("ARIC hypoxanthine")
ggplot(imputation_results, aes(metab_inosine)) + geom_rug() + geom_density() + ggtitle("ARIC inosine")
# pca imputation_results
pca = prcomp(imputation_results, center = T, scale = T)
pcs = pca$x
var_explained_df <- data.frame(PC= paste0("PC",1:286),
var_explained=(pca$sdev)^2/sum((pca$sdev)^2))
var_top = subset(var_explained_df, PC %in% paste0('PC', 1:10))
var_top$PC <- factor(var_top$PC, levels = paste0('PC', 1:10))
var_top %>%
ggplot(aes(x=PC,y=var_explained))+
geom_col()+
labs(title="Variance explained by PCs")
imputation_results = cbind(imputation_results, pca$x)
imputation_results$ID = rownames(imputation_results)
pheno_only$ID = rownames(pheno_only)
w.pheno = merge(imputation_results, pheno_only, by = 'ID')
ggplot(w.pheno, aes(PC1, PC2, col = eGFR_ckdepi)) + geom_point()
pairs(~PC1 + PC2 + PC3 + PHASE + eGFR_ckdepi + as.factor(center) + age + as.factor(sex) + bmi, data = w.pheno, lower.panel=twolines, diag.panel=mydiag.panel, upper.panel=panel.cor, label.pos=0.5, main="Correlation matrix of PCs and covariates", labels = c('PC1', 'PC2', 'PC3', 'phase', 'eGFR', 'center', 'age', 'sex', 'bmi'))
library(yangR)
to.remove = numeric()
for(i in 1:10){
to.remove = c(to.remove, find.outliers(pcs[,i], sd = 4))
}
to.remove = unique(to.remove)
# 99 outliers
filt_imputation_results = imputation_results[-to.remove,]
rownames(filt_imputation_results) = filt_imputation_results$ID
filt_imputation_results$ID = NULL
pca = prcomp(filt_imputation_results, center = T, scale = T)
pcs = pca$x
to.remove = numeric()
for(i in 1:10){
to.remove = c(to.remove, find.outliers(pcs[,i], sd = 4))
}
to.remove = unique(to.remove)
# 18 outliers
filt_imputation_results = filt_imputation_results[-to.remove,]
pca = prcomp(filt_imputation_results, center = T, scale = T)
pcs = pca$x
to.remove = numeric()
for(i in 1:10){
to.remove = c(to.remove, find.outliers(pcs[,i], sd = 4))
}
to.remove = unique(to.remove)
# 2 outliers, don't bother with them.
filt_imputation_results$ID = rownames(filt_imputation_results)
w.pheno.filt = merge(filt_imputation_results, pheno_only, by = 'ID')
w.pheno.filt = cbind(w.pheno.filt, pcs)
w.pheno = w.pheno.filt
# eGFR filter:
w.pheno = subset(w.pheno, eGFR_ckdepi >= 59)
library(yangR)
library(analyzeR)
lm(inv.norm.transform(metab_alanine) ~ age + bmi + sex, data = w.pheno) %>% summary %>% coef -> ala
lm(inv.norm.transform(`metab_N-acetylalanine`) ~ age + bmi + sex, data = w.pheno) %>% summary %>% coef -> n.ala
lm(inv.norm.transform(`metab_2-hydroxybutyrate (AHB)`) ~ age + bmi + sex, data = w.pheno) %>% summary %>% coef -> ahb
lm(inv.norm.transform(metab_succinylcarnitine) ~ age + bmi + sex, data = w.pheno) %>% summary %>% coef -> carn
lm(inv.norm.transform(`metab_N-acetylalanine`) ~ age + bmi + sex, data = w.pheno) %>% summary %>% coef -> threi
library(htmlTable)
menni.estimates = data.frame(Beta = c(0.014, 0.017, 0.016, 0.021), SE = c(0.0009, 0.0009, 0.0009, 0.001), P = c(3.57e-48, 5.8e-68, 8.9e-61, 9.04e-84))
aric.estimates = data.frame(Beta = c(ala[2,1], n.ala[2,1], ahb[2,1], carn[2,1]), SE = c(ala[2,2], n.ala[2,2], ahb[2,2], carn[2,2]), P = c(ala[2,4], n.ala[2,4], ahb[2,4], carn[2,4]))
menni.estimates$SE = formatbeta(menni.estimates$SE)
aric.estimates$Beta = formatbeta(aric.estimates$Beta)
aric.estimates$SE = formatbeta(aric.estimates$SE)
aric.estimates$P = formatpval(aric.estimates$P)
both = cbind(menni.estimates, aric.estimates)
headers = c('Estimate', 'Pval')
# htmlTable(both[,c(1,3,4,6)], cgroup = c('Menni et. al', "ARIC"), n.cgroup = c(2,2), header = paste0('&nbsp;', rep(headers, 2), '&nbsp;'), rnames = c('Alanine', 'N-Acetylalanine', '2-Hydroxybutyrate', 'Succinylcarnitine'))
mtDNA <- readRDS("/Volumes/JHPCE/dcs01/active/projects/mito/mito.cnv/FINAL.MITO.PHENOTYPES/pheno/ARIC.Affy.SVs.mtDNA.pheno.FINAL.rds")
mt.metab = merge(mtDNA, w.pheno, by = 'ID')
v2 = subset(mt.metab, visit == 'visit2')
lm(v2$metab_hypoxanthine ~ v2$resid.mtDNA.WBC) %>% summary # 3.26e-11
# # topmed = as.data.frame(fread('/Volumes/JHPCE/dcs01/active/projects/TOPMed/pipeline.cn/ARIC/meta10_count_cvg_mutect2_mutserve.tab'))  <- stephanie's, but doesn't have the same number of people....
# topmed = as.data.frame(fread('/Volumes/JHPCE/dcs01/static/TOPMed/mtDNA/75691/topmed-dcc/exchange/phs001211_TOPMed_WGS_ARIC/Phenotype/Working_groups/mtDNA/freeze.8.mtDNA.phs001211.Boerwinkle.copy.number.txt'))
#
# # MS = sex adjusted mtDNA, average genome size = column M
#
# # topmed visit data:
# # everything aborts here! make this file smaller!!
# # visit.info = as.data.frame(fread('/Volumes/JHPCE/dcs01/active/projects/mito/mito.cnv/ARIC.SEQ/Data/ARIC.updatedJUN19.WGS.TOPMED.CCDG.pheno.txt'))
#
# visit.info = readRDS('/Volumes/JHPCE/dcs01/active/projects/mesa/syang/R_objects/visit.info.rds') # derived from: /dcs01/arking/arkinglab/active/projects/mito/mito.cnv/ARIC.SEQ/Data/ARIC.updatedJUN19.WGS.TOPMED.CCDG.pheno.txt
#
# # thuyvy is a godsend:
# bridge = as.data.frame(fread('/Volumes/JHPCE/ARIC_static/ARIC_Data/Whole_Genome_Seq/TOPMed_Sequencing/TOPMed_Subject_ID_to_ARIC_IID.txt'))
# which(bridge$ARIC_IID %in% w.pheno$ID) %>% length # bridge has the right people
#
# visit.info2 = merge(bridge, visit.info, by.x = 'ARIC_IID', by.y = "ID")
# which(visit.info2$ARIC_IID %in% w.pheno$ID) %>% length # still has a good number
#
# w.visit = merge(topmed, visit.info2, by.x = 'NWD', by.y = 'SAMPLE_ID')
# which(w.visit$ARIC_IID %in% w.pheno$ID) %>% length # still has a good number
#
# topmed_care = dplyr::select(w.visit, ARIC_IID, DNA.visit.AGE, DNA.visit.WBC, DNA.visit.MENOP, Center, sex, MS, M, visit)
#
# colnames(topmed_care) = c('ID', 'age', 'wbc', 'menopause', 'center', 'sex', 'mtDNA_sexgenome_adj', 'mtDNA_avg_genome', 'visit')
# # has not been adjusted for anything.
#
# # adjust topmed_care mtDNA
# library(splines)
# topmed_care$mtDNA_adjusted = scale(resid(lm(mtDNA_sexgenome_adj ~ ns(age, 2) + wbc + center + sex, data = topmed_care, na.action = na.exclude)))
#
# # ggplot(topmed_care, aes(as.factor(menopause), mtDNA_sexgenome_adj)) + geom_boxplot()
#
# # check hypoxanthine
# mt.metab2 = merge(topmed_care, w.pheno, by = 'ID')
# w.pheno$ID[which(w.pheno$ID %in% topmed_care$ID)] # why are there only 3 overlaps??
#
# v2.2 = subset(mt.metab2, visit == 'visit2')
#
# lm(v2$metab_hypoxanthine ~ v2$resid.mtDNA.WBC) %>% summary # 5.93e-6
print('there is only an overlap of 3 individuals for the sequencing data. boo.')
v2 = as.data.frame(subset(mt.metab, visit == 'visit2'))
pairs(~PC1 + PC2 + PC3 + DNA.visit.WBC + resid.mtDNA.WBC + as.factor(center) + age + as.factor(sex) + bmi + as.factor(smoke), data = mt.metab, lower.panel=twolines, diag.panel=mydiag.panel, upper.panel=panel.cor, label.pos=0.5, main="Correlation matrix of PCs and covariates", labels = c('PC1', 'PC2', 'PC3', 'WBC', 'mtDNA.WBC', 'center', 'age', 'sex', 'bmi', 'smoke'))
# 0.5 remove metabolite outliers and set to NA? or inverse normal transform?
# 1. adjust every single metabolite for covariates.
# 2. single lm with resid.mtDNA.WBC and extract
# ggplot(v2, aes(age, DNA.visit.AGE)) + geom_point()
metabs = v2[,grep('metab', colnames(v2))]
resids.metab = as.data.frame(matrix(nrow = nrow(metabs), ncol = ncol(metabs)))
for(i in 1:ncol(metabs)){
to_adjust = metabs[,i]
metabs_adjusted = scale(resid(lm(to_adjust ~ v2$DNA.visit.AGE + as.factor(v2$sex) + v2$bmi + as.factor(v2$center) + v2$eGFR_ckdepi + as.factor(v2$PHASE) + as.factor(v2$race), na.action = na.exclude)))
resids.metab[,i] = metabs_adjusted
colnames(resids.metab)[i] = colnames(metabs)[i]
}
resids.metab.2 = resids.metab
results.frame = as.data.frame(matrix(nrow = ncol(resids.metab), ncol = 5))
colnames(results.frame) = c('Metabolite', 'Estimate', 'SE', 'Tval', 'Pval')
for(i in 1:ncol(resids.metab)){
lm(v2$resid.mtDNA.WBC ~ resids.metab[,i]) %>% summary %>% coef -> est
results.frame[i,] = c(colnames(resids.metab)[i], est[2,])
}
results.frame$Estimate = as.numeric(results.frame$Estimate)
results.frame$SE = as.numeric(results.frame$SE)
results.frame$Tval = as.numeric(results.frame$Tval)
results.frame$Pval = as.numeric(results.frame$Pval)
results.frame = results.frame[order(results.frame$Pval, decreasing = F),]
results.frame$Metabolite = gsub('metab_', '', results.frame$Metabolite)
head(results.frame)
results.frame$Estimate = formatbeta(results.frame$Estimate)
results.frame$SE = formatbeta(results.frame$SE)
results.frame$Tval = formatbeta(results.frame$Tval)
results.frame$pval = results.frame$Pval
results.frame$Pval = formatpval(results.frame$Pval)
# htmlTable(head(results.frame[,c(1,2,4,5)], 10), rnames = rep('', nrow(results.frame)), header = c('Metabolite', 'Estimate', '&nbsp;T-value&nbsp;', '&nbsp;P-value&nbsp;'))
m1 = results.frame[grep('^lactate$', results.frame$Metabolite),]
m2 = results.frame[grep('^carnitine$', results.frame$Metabolite),]
m3 = results.frame[grep('^alanine$', results.frame$Metabolite),]
# htmlTable(rbind(m1, m2, m3)[,c(1,2,4,5)], rnames = rep('', nrow(results.frame)), header = c('&nbsp;Metabolite&nbsp;', 'Estimate', '&nbsp;T-value&nbsp;', '&nbsp;P-value&nbsp;'))
hypoxanthine.results = as.data.frame(matrix(nrow = 100, ncol = 5))
colnames(hypoxanthine.results) = c('Iteration', 'Estimate', 'SE', 'Tval', 'Pval')
set.seed(1)
for(i in 1:100){
indices = sample(1:nrow(v2), 852)
v2.new = v2[indices,]
resids.metab.new = resids.metab.2[indices,]
lm(v2.new$resid.mtDNA.WBC ~ resids.metab.new$metab_hypoxanthine) %>% summary %>% coef -> est
hypoxanthine.results[i,] = c(i, est[2,])
print(paste0('finished iteration ', i))
}
hypoxanthine.results
pval_qqplot(hypoxanthine.results$Pval)
hypoxanthine.results = as.data.frame(matrix(nrow = 100, ncol = 5))
colnames(hypoxanthine.results) = c('Iteration', 'Estimate', 'SE', 'Tval', 'Pval')
set.seed(1)
for(i in 1:100){
indices = sample(1:nrow(v2), 158)
v2.new = v2[indices,]
resids.metab.new = resids.metab.2[indices,]
lm(v2.new$resid.mtDNA.WBC ~ resids.metab.new$metab_hypoxanthine) %>% summary %>% coef -> est
hypoxanthine.results[i,] = c(i, est[2,])
print(paste0('finished iteration ', i))
}
pval_qqplot(hypoxanthine.results$Pval)
min(hypoxanthine.results$Pval)
hypoxanthine.results = hypoxanthine.results[order(hypoxanthine.results$Pval, decreasing = F),]
hypoxanthine.results[5,]
hypoxanthine.results[10,]
hypoxanthine.results[100,]
hypoxanthine.results[50,]
metab1 = read_excel('/Volumes/JHPCE/dcs01/static/aric/raw.data/metabolomics/ARIC_MetaboliteInfo_2Batches_toCC_11072018.xlsx')
w.annot2 = merge(results.frame, metab1, by.x = 'Metabolite', by.y = 'biochemical')
View(w.annot2)
v2 = as.data.frame(subset(mt.metab, visit == 'visit2'))
pairs(~PC1 + PC2 + PC3 + DNA.visit.WBC + resid.mtDNA.WBC + as.factor(center) + age + as.factor(sex) + bmi + as.factor(smoke), data = mt.metab, lower.panel=twolines, diag.panel=mydiag.panel, upper.panel=panel.cor, label.pos=0.5, main="Correlation matrix of PCs and covariates", labels = c('PC1', 'PC2', 'PC3', 'WBC', 'mtDNA.WBC', 'center', 'age', 'sex', 'bmi', 'smoke'))
# ggplot(v2, aes(age, DNA.visit.AGE)) + geom_point()
metabs = v2[,grep('metab', colnames(v2))]
resids.metab = as.data.frame(matrix(nrow = nrow(metabs), ncol = ncol(metabs)))
for(i in 1:ncol(metabs)){
to_adjust = metabs[,i]
metabs_adjusted = scale(resid(lm(to_adjust ~ v2$DNA.visit.AGE + as.factor(v2$sex) + v2$bmi + as.factor(v2$center) + v2$eGFR_ckdepi + as.factor(v2$PHASE) + as.factor(v2$race), na.action = na.exclude)))
resids.metab[,i] = metabs_adjusted
colnames(resids.metab)[i] = colnames(metabs)[i]
}
resids.metab.2 = resids.metab
results.frame = as.data.frame(matrix(nrow = ncol(resids.metab), ncol = 5))
colnames(results.frame) = c('Metabolite', 'Estimate', 'SE', 'Tval', 'Pval')
for(i in 1:ncol(resids.metab)){
lm(v2$resid.mtDNA.WBC ~ resids.metab[,i]) %>% summary %>% coef -> est
results.frame[i,] = c(colnames(resids.metab)[i], est[2,])
}
results.frame$Estimate = as.numeric(results.frame$Estimate)
results.frame$SE = as.numeric(results.frame$SE)
results.frame$Tval = as.numeric(results.frame$Tval)
results.frame$Pval = as.numeric(results.frame$Pval)
results.frame = results.frame[order(results.frame$Pval, decreasing = F),]
results.frame$Metabolite = gsub('metab_', '', results.frame$Metabolite)
head(results.frame)
results.frame$Estimate = formatbeta(results.frame$Estimate)
results.frame$SE = formatbeta(results.frame$SE)
results.frame$Tval = formatbeta(results.frame$Tval)
results.frame$pval = results.frame$Pval
results.frame$Pval = formatpval(results.frame$Pval)
# htmlTable(head(results.frame[,c(1,2,4,5)], 10), rnames = rep('', nrow(results.frame)), header = c('Metabolite', 'Estimate', '&nbsp;T-value&nbsp;', '&nbsp;P-value&nbsp;'))
m1 = results.frame[grep('^lactate$', results.frame$Metabolite),]
m2 = results.frame[grep('^carnitine$', results.frame$Metabolite),]
m3 = results.frame[grep('^alanine$', results.frame$Metabolite),]
# htmlTable(rbind(m1, m2, m3)[,c(1,2,4,5)], rnames = rep('', nrow(results.frame)), header = c('&nbsp;Metabolite&nbsp;', 'Estimate', '&nbsp;T-value&nbsp;', '&nbsp;P-value&nbsp;'))
head(results.frame)
metab1 = read_excel('/Volumes/JHPCE/dcs01/static/aric/raw.data/metabolomics/ARIC_MetaboliteInfo_2Batches_toCC_11072018.xlsx')
w.annot2 = merge(results.frame, metab1, by.x = 'Metabolite', by.y = 'biochemical')
table(w.annot2$sub_pathway)
table(w.annot2$super_pathway)
subset(w.annot2, super_pathway == 'Energy')
subset(w.annot2, super_pathway == 'Nucleotide')
nucs_only = subset(w.annot2, super_pathway == 'Nucleotide')
nucs_only[order(nucs_only$Pval, decreasing= T),]
dplyr::select(nucs_only[order(as.numeric(nucs_only$Pval), decreasing= T),], Metabolite, Estimate, Pval, super_pathway)
dplyr::select(nucs_only[order(as.numeric(nucs_only$Pval), decreasing = F),], Metabolite, Estimate, Pval, super_pathway)
alb = read_excel("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/2021-03-18 131124 JingPlate1-4 Mar2021-ViiA7-alb.xls", sheet = "Results", skip = 37)
library(yangR)
library(readxl)
library(dplyr)
library(ggplot2)
library(knitr)
wd <- '/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/'
setwd(wd)
opts_knit$set(root.dir = wd)
# nuclear albumin probe
alb = read_excel("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/2021-03-18 131124 JingPlate1-4 Mar2021-ViiA7-alb.xls", sheet = "Results", skip = 37)
alb
View(alb)
alb = alb[-c(nrow(alb-5):nrow(alb)),]
alb = alb[-c((nrow(alb)-5):nrow(alb)),]
View(alb)
# nuclear albumin probe
alb = read_excel("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/2021-03-18 131124 JingPlate1-4 Mar2021-ViiA7-alb.xls", sheet = "Results", skip = 37)
alb = alb[-c((nrow(alb)-4):nrow(alb)),]
# mitochondrial D-loop probe
dlp = read_excel("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/2021-03-18 131124 JingPlate1-4 Mar2021-ViiA7-dlp.xls", sheet = "Results", skip = 37)
dlp = dlp[-c((nrow(dlp)-4):nrow(dlp)),]
p1 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate1.csv")
View(p1)
p1 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate1.csv")
p2 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate2.csv")
p3 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate3.csv")
p4 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate4.csv")
dlp$Dlp_CT = dlp$CT
alb$Alb_CT = alb$CT
df = merge(dlp, alb, by = c('Well Position', 'Sample Name'))
df$Row = substr(df$`Well Position`, 1, 1)
df$Col = substr(df$`Well Position`, 2, 4)
colnames(df) = make.names(colnames(df))
View(df)
df$deltaCT = df$Alb_CT - df$Dlp_CT
dlp$Dlp_CT = as.numeric(dlp$CT)
alb$Alb_CT = as.numeric(alb$CT)
df = merge(dlp, alb, by = c('Well Position', 'Sample Name'))
df$Row = substr(df$`Well Position`, 1, 1)
df$Col = substr(df$`Well Position`, 2, 4)
df$deltaCT = df$Alb_CT - df$Dlp_CT
df$deltaCT
p1 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate1.csv")
p2 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate2.csv")
p3 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate3.csv")
p1$Plate
p1$Plate = 1
p4$Plate = 4
p2$Plate = 2
p3$Plate = 3
plate1.named = merge(plate1, p1, by.x = 'Old.Well', by.y = 'Well')
samps1 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate1.csv")
samps1$Plate = 1
samps2 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate2.csv")
samps2$Plate = 2
samps3 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate3.csv")
samps3$Plate = 3
samps4 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate4.csv")
samps4$Plate = 4
p1 = paste0(rep(c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), each = 12), 1:12)
p2 = paste0(rep(c('B', 'D', 'F', 'H', 'J', 'L', 'N', 'P'), each = 12), 1:12)
p3 = paste0(rep(c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), each = 12), 13:24)
p4 = paste0(rep(c('B', 'D', 'F', 'H', 'J', 'L', 'N', 'P'), each = 12), 13:24)
plate1 = subset(df, Well.Position %in% p1)
plate1$Old.Row = rep(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), each = 12)
plate1$Old.Col = as.numeric(plate1$Col)
plate1$Old.Well = paste0(plate1$Old.Row, plate1$Old.Col)
dlp$Dlp_CT = as.numeric(dlp$CT)
alb$Alb_CT = as.numeric(alb$CT)
df = merge(dlp, alb, by = c('Well Position', 'Sample Name'))
df$Row = substr(df$`Well Position`, 1, 1)
df$Col = substr(df$`Well Position`, 2, 4)
df$deltaCT = df$Alb_CT - df$Dlp_CT
colnames(df) = make.names(colnames(df))
samps1 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate1.csv")
samps1$Plate = 1
samps2 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate2.csv")
samps2$Plate = 2
samps3 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate3.csv")
samps3$Plate = 3
samps4 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate4.csv")
samps4$Plate = 4
df$`Well Position`
p1 = paste0(rep(c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), each = 12), 1:12)
p2 = paste0(rep(c('B', 'D', 'F', 'H', 'J', 'L', 'N', 'P'), each = 12), 1:12)
p3 = paste0(rep(c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), each = 12), 13:24)
p4 = paste0(rep(c('B', 'D', 'F', 'H', 'J', 'L', 'N', 'P'), each = 12), 13:24)
plate1 = subset(df, Well.Position %in% p1)
plate1$Old.Row = rep(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), each = 12)
plate1$Old.Col = as.numeric(plate1$Col)
plate1$Old.Well = paste0(plate1$Old.Row, plate1$Old.Col)
plate1.named = merge(plate1, p1, by.x = 'Old.Well', by.y = 'Well')
samps1$Well
plate1.named = merge(plate1, samps1, by.x = 'Old.Well', by.y = 'Well')
plate1.named$Subject.ID
plate1.named$Visit
str(samps1)
duplicated(plate1.named$Subject.ID)
plate1
plate1.named[which(is.na(plate1.named$Subject.ID)),]
plate1.named %>% filter(Current.Label == 'Water')
plate1.named %>% filter(Current.Label == 'Water') %>% select(deltaCT, Current.Label)
plate1.named %>% filter(deltaCT < 7)
plate1.named = merge(plate1, samps1, by.x = 'Old.Well', by.y = 'Well')
plate2.named = merge(plate2, samps2, by.x = 'Old.Well', by.y = 'Well')
p1 = paste0(rep(c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), each = 12), 1:12)
p2 = paste0(rep(c('B', 'D', 'F', 'H', 'J', 'L', 'N', 'P'), each = 12), 1:12)
p3 = paste0(rep(c('A', 'C', 'E', 'G', 'I', 'K', 'M', 'O'), each = 12), 13:24)
p4 = paste0(rep(c('B', 'D', 'F', 'H', 'J', 'L', 'N', 'P'), each = 12), 13:24)
plate1 = subset(df, Well.Position %in% p1)
plate1$Old.Row = rep(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), each = 12)
plate1$Old.Col = as.numeric(plate1$Col)
plate1$Old.Well = paste0(plate1$Old.Row, plate1$Old.Col)
plate2 = subset(df, Well.Position %in% p2)
plate2$Old.Row = rep(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), each = 12)
plate2$Old.Col = as.numeric(plate2$Col)
plate2$Old.Well = paste0(plate2$Old.Row, plate2$Old.Col)
plate3 = subset(df, Well.Position %in% p3)
plate3$Old.Row = rep(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), each = 12)
plate3$Old.Col = as.numeric(plate3$Col)-12
plate3$Old.Well = paste0(plate3$Old.Row, plate3$Old.Col)
plate4 = subset(df, Well.Position %in% p4)
plate4$Old.Row = rep(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), each = 12)
plate4$Old.Col = as.numeric(plate4$Col)-12
plate4$Old.Well = paste0(plate4$Old.Row, plate4$Old.Col)
plate1.named = merge(plate1, samps1, by.x = 'Old.Well', by.y = 'Well')
plate2.named = merge(plate2, samps2, by.x = 'Old.Well', by.y = 'Well')
plate3.named = merge(plate3, samps3, by.x = 'Old.Well', by.y = 'Well')
plate4.named = merge(plate4, samps4, by.x = 'Old.Well', by.y = 'Well')
full = rbind(plate1.named, plate2.named, plate3.named, plate4.named)
full_care = dplyr::select(full, IDNO, Exam, Well.Position, Old.Well, Alb_CT, Dlp_CT)
full %>% filter(Current.Label == 'Water') %>% select(deltaCT, Current.Label)
plate1.named %>% filter(deltaCT < 7)
full %>% filter(deltaCT < 7)
full %>% filter(deltaCT < 7) %>% nrow
# save data:
saveRDS(full, file = '/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/full.rds')
# save data:
saveRDS(full, file = '/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/full_plate1.rds')
# nuclear albumin probe
alb = read_excel("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/2021-03-19 124719 NewJing5 Mar2021-ViiA7-ALB.xls", sheet = "Results", skip = 37)
alb = alb[-c((nrow(alb)-4):nrow(alb)),]
# mitochondrial D-loop probe
dlp = read_excel("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/2021-03-19 124719 NewJing5 Mar2021-ViiA7-DLP.xls", sheet = "Results", skip = 37)
View(dlp)
dlp = dlp[-c((nrow(dlp)-4):nrow(dlp)),]
View(dlp)
dlp$Dlp_CT = as.numeric(dlp$CT)
alb$Alb_CT = as.numeric(alb$CT)
df = merge(dlp, alb, by = c('Well Position', 'Sample Name'))
df$deltaCT = df$Alb_CT - df$Dlp_CT
colnames(df) = make.names(colnames(df))
samps5 = read.csv("/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Plates/Plate5.csv")
df
nrow(df)
View(df)
plate5.named = merge(df, samps5, by.x = 'Well.Position', by.y = 'Well')
View(plate5.named)
df$Well.Position
samps5$Well
plate5.named = merge(df, samps5, by.x = 'Sample.Name', by.y = 'Well')
View(plate5.named)
plate5.named$Current.Label
samps5$Current.Label
plate5.named %>% filter(deltaCT < 7)
plate5.named %>% filter(Current.Label == 'Water') %>% select(deltaCT, Current.Label)
samps5$Monochrome.Plate = 2
full$Monochrome.Plate = 1
full_all = rbind(full, samps5)
full_all = rbind.fill(full, samps5)
full_all = plyr::rbind.fill(full, samps5)
ggplot(full_all, aes(as.factor(Monochrome.Plate, deltaCT))) + geom_boxplot()
ggplot(full_all, aes(as.factor(Monochrome.Plate), deltaCT)) + geom_boxplot()
plate5.named$Monochrome.Plate = 2
full_all = plyr::rbind.fill(full, plate5.named)
ggplot(full_all, aes(as.factor(Monochrome.Plate), deltaCT)) + geom_boxplot()
ggplot(full_all, aes(as.factor(Monochrome.Plate), deltaCT)) + geom_boxplot() + geom_point()
ggplot(subset(full_all, deltaCT < 7), aes(as.factor(Monochrome.Plate), deltaCT)) + geom_boxplot() + geom_point()
ggplot(subset(full_all, deltaCT > 7), aes(as.factor(Monochrome.Plate), deltaCT)) + geom_boxplot() + geom_point()
# save full data:
saveRDS(full_all, file = '/Volumes/JHPCE/dcs01/active/projects/MACS.BOS/Data/full.rds')
setwd('~/Documents/Work/TidyTuesday/3.16.2021/')
runApp()
library(shiny)
runApp()
runApp()
rsconnect::setAccountInfo(name='syyang93',
token='D5215863487CE5402209BD40C0749F16',
secret='E/nREj8p7cr6ubm3swvSqoDcLCD09OtwS3zHogKD')
setwd('~/Documents/Work/TidyTuesday/3.16.2021/')
deployApp(appName = look_games_time)
deployApp(appName = 'look_games_time')
setwd('~/Documents/Work/tidyTuesday/3.16.2021/')
getwd()
deployApp(appName = 'look_games_time')
deployApp()
deployApp(appName = 'look_games_app')
